@using AvibaWeb.ViewModels.CorpReceiptViewModels
@model CreateReceiptViewModel

<!-- CONTENT START -->
<div class="box col-md-12">
    <div class="box-inner">
        <div class="box-header well" data-original-title="">
            <h2>Создание счета</h2>
        </div>
        <input id="editReceiptId" type="hidden" value="@Model.Receipt?.ReceiptId" />
        <div class="box-content">
            <div class="row">
                <div class="col-md-6">
                    <h5>Поставщик:</h5>
                    <select data-placeholder="Выбрать организацию" id="selectPayee" data-rel="chosen">
                        <option value=""></option>
                        <optgroup label="Организации">
                            @foreach (var org in Model.Organizations)
                            {
                                <option>@org</option>
                            }
                        </optgroup>
                    </select>
                    <div id="payeeOrgFinancialAccountsDiv"></div>
                    <input id="editReceiptOrgName" type="hidden" value="@Model.Receipt?.OrganizationName" />
                    <input id="editReceiptBankName" type="hidden" value="@Model.Receipt?.BankName" />
                </div>
            
                <div class="col-md-6">
                    <h5>Покупатель:</h5>
                    <select data-placeholder="Выбрать корпоратора" id="selectPayer" data-rel="chosen">
                        <option value=""></option>
                        <optgroup label="Корпораторы">
                            @foreach (var counterparty in Model.Counterparties)
                            {
                                <option>@counterparty</option>
                            }
                        </optgroup>
                    </select>
                    <input id="editReceiptCorpName" type="hidden" value="@Model.Receipt?.CorporatorName" />
                </div>
            </div>
            <br>
            
            <br>
            <div class="row">
                <div class="col-md-12">
                    <label for="feeRate">Сбор за сегмент:</label>
                    <input type="text" id="feeRate" value="@Model.Receipt?.FeeRate" />
                    <hr>
                </div>
            </div>
            <br>
            <div class="row">
                <div class="col-md-12">
                    <div id="ticketListDiv">
                        @if (Model.Receipt != null)
                        {
                            foreach (var item in Model.Receipt.Items)
                            {
                        <div>
                            <input type="hidden" value="@item.TicketOperationId" />
                            <b>@item.BSONumber</b>
                            <a href="/" class="btn btn-danger btn-sm removeTicketBtn"><i class="glyphicon glyphicon-remove"></i></a>
                        </div>
                            }
                        }
                    </div>
                    <hr>
                    <h5>Добавить билеты</h5>
                    <div class="col-md-12">
                        Выбрать с: <input type="text" id="min" name="min" class="date-range-filter"> по: <input type="text" id="max" name="max" class="date-range-filter">
                        <a href="/" id="getTicketListBtn" class="btn btn-success">Список билетов</a>
                    </div>
                    
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-12" id="ticketListBlock">

                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-12">
                    <a href="/" id="sendDataBtn" class="btn btn-success">Сохранить</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    onload = function () {
        $('[data-rel="chosen"],[rel="chosen"]').chosen({ width: "100%" });

        // Select the node that will be observed for mutations
        const payeeTargetNode = $("#selectPayee").next().find("a.chosen-single span")[0];

        // Options for the observer (which mutations to observe)
        const config = { attributes: true, childList: true, subtree: true };

        // Callback function to execute when mutations are observed
        const payeeCallback = function (mutationsList, observer) {
            const mutation = mutationsList[0];
            $.ajax({
                url: "/Data/OrganizationFinancialAccounts",
                type: "GET",
                cache: false,
                data: { orgName: mutation.target.textContent },
                success: function (result) {
                    $("#payeeOrgFinancialAccountsDiv").html(result);
                    $('[data-rel="chosen"],[rel="chosen"]').chosen({ width: "100%" });

                    var editValue = $("#editReceiptBankName").val();
                    if (editValue) {
                        $('#selectBank').val(editValue).trigger('chosen:updated');
                    }
                },
                error: function (error) {
                    $("#payeeOrgFinancialAccountsDiv").html();
                }
            });
        };

        // Create an observer instance linked to the callback function
        const payeeObserver = new MutationObserver(payeeCallback);

        // Start observing the target node for configured mutations
        payeeObserver.observe(payeeTargetNode, config);

        $("#min").datepicker();
        $("#max").datepicker();

        $("#min").val(moment().startOf('month').format("DD.MM.YYYY"));
        $("#max").val(moment().endOf('month').format("DD.MM.YYYY"));

        var editValue = $("#editReceiptCorpName").val();
        if (editValue) {
            $('#selectPayer').val(editValue).trigger('chosen:updated');
        }

        editValue = $("#editReceiptOrgName").val();
        if (editValue) {
            $('#selectPayee').val(editValue).trigger('chosen:updated');
        }
    }

    onload();

    $("#sendDataBtn").click(function (e) {
        var items = new Array();
        $("#ticketListDiv").children().each(function () {
            const firstDiv = $(this).find("input");
            const receiptItem = {
                TicketOperationId: firstDiv.val()
            };
            items.push(receiptItem);
        });

        const sendJsonData = {
            ReceiptId: $('#editReceiptId').val(),
            PayerName: $("#selectPayer").next().find("a.chosen-single span").first().html(),
            PayeeName: $("#selectPayee").next().find("a.chosen-single span").first().html(),
            PayeeBankName: $("#payeeOrgFinancialAccountsDiv > div").find("a.chosen-single span").first().html(),
            FeeRate: $("#feeRate").val(),
            Items: items
        };

        console.log(sendJsonData);

        e.preventDefault();
        $.ajax({
            url: "/CorpReceipt/CreateReceipt",
            type: "POST",
            cache: false,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(sendJsonData),
            success: function (result) {
                $.ajax({
                    url: "/CorpReceipt/Receipts",
                    type: "GET",
                    cache: false,
                    success: function (r) {
                        $("#results").html(r);
                    },
                    error: function (err) {
                        console.log(err.message);
                    }
                });
            },
            error: function (error) {
                console.log(error.message);
            }
        });
    });

    $("#getTicketListBtn").click(function (e) {
        var exceptItems = new Array();
        $("#ticketListDiv").children().each(function () {
            const firstDiv = $(this).find("input");
            const receiptItem = {
                TicketOperationId: firstDiv.val()
            };
            exceptItems.push(receiptItem);
        });

        const sendJsonData = {
            fromDate: moment($('#min').val(), "DD.MM.YYYY").toISOString(true),
            toDate: moment($('#max').val(), "DD.MM.YYYY").toISOString(true),
            ExceptItems: exceptItems
        };

        console.log(sendJsonData);

        e.preventDefault();
        $.ajax({
            url: "/CorpReceipt/TicketList",
            type: "POST",
            cache: false,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(sendJsonData),
            success: function (result) {
                $("#ticketListBlock").html(result.message);
            },
            error: function (error) {
                console.log(error);
            }
        });
    });

    $(document).on('click',
        '.removeTicketBtn',
        function(e) {
            e.preventDefault();
            $(this).parent().remove();
            //$('#dataTable').dataTable().fnDeleteRow($(this).parents('tr')[0]);
        });
</script>
