@model List<string>

<div class="box col-md-12">
    <div class="box-inner">
        <div class="box-header well" data-original-title="">
            <h2>Создание акта сверки</h2>
        </div>
        <div class="box-content">
            <div class="row">
                <div class="col-md-6">
                    <h5>Корпоратор:</h5>
                    <div id="payerSelectDiv">
                        <select data-placeholder="Выбрать корпоратора" id="selectPayer" data-rel="chosen">
                            <option value=""></option>
                            <optgroup label="Корпораторы">
                                @foreach (var counterparty in Model)
                                {
                                    <option>@counterparty</option>
                                }
                            </optgroup>
                        </select>
                    </div>
                    <div id="payeeOrgFinancialAccountsDiv"></div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    За период с: <input type="text" id="min" name="min" class="date-range-filter"> по: <input type="text" id="max" name="max" class="date-range-filter">
                    <a href="/" id="createReviseReportBtn" class="btn btn-success">Создать акт</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    $(function() {
        $('[data-rel="chosen"],[rel="chosen"]').chosen({ width: "100%" });
    });

    $("#createReviseReportBtn").click(function (e) {
        const sendJsonData = {
            fromDate: moment($('#min').val(), "DD.MM.YYYY").toISOString(true),
            toDate: moment($('#max').val(), "DD.MM.YYYY").toISOString(true),
            payerName: $("#selectPayer").next().find("a.chosen-single span").first().html()
        };

        e.preventDefault();
        $.ajax({
            url: "/CorpClient/ReviseReport",
            type: "POST",
            cache: false,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(sendJsonData),
            success: function (result) {
                const bodyData = [];

                const headerRow = [];

                headerRow.push({ text: '№', style: 'tableHeader' });
                headerRow.push({ text: 'Наименование', style: 'tableHeader' });
                headerRow.push({ text: 'Кол-во', style: 'tableHeader' });
                headerRow.push({ text: 'Ед.', style: 'tableHeader' });
                headerRow.push({ text: 'Цена', style: 'tableHeader' });
                headerRow.push({ text: 'Сумма', style: 'tableHeader' });

                bodyData.push(headerRow);

                var dataRow = [];
                var itemCount = 0;
                result.items.forEach(function (item) {
                    dataRow = [];

                    itemCount++;
                    dataRow.push({ text: (itemCount).toString(), alignment: 'center' });
                    dataRow.push({ text: item.ticketLabel, style: 'smallText' });
                    dataRow.push({ text: item.segCount, alignment: 'center' });
                    dataRow.push({ text: 'полетный\nсегмент', alignment: 'center' });
                    dataRow.push({ text: item.amountStr, alignment: 'right' });
                    dataRow.push({ text: item.amountStr, alignment: 'right' });

                    bodyData.push(dataRow);
                });

                result.taxes.forEach(function (item) {
                    dataRow = [];

                    itemCount++;
                    dataRow.push({ text: (itemCount).toString(), alignment: 'center' });
                    dataRow.push({ text: 'Сбор за оформление билета', style: 'smallText' });
                    dataRow.push({ text: item.segCount, alignment: 'center' });
                    dataRow.push({ text: 'полетный\nсегмент', alignment: 'center' });
                    dataRow.push({ text: item.feeStr, alignment: 'right' });
                    dataRow.push({ text: item.amountStr, alignment: 'right' });

                    bodyData.push(dataRow);
                });

                // itemCount++;
                // dataRow.push({ text: (itemCount).toString(), alignment: 'center' });
                // dataRow.push({ text: 'Сбор за оформление авиабилета', style: 'smallText' });
                // dataRow.push({ text: result.segCountTotal, alignment: 'center' });
                // dataRow.push({ text: 'полетный\nсегмент', alignment: 'center' });
                // dataRow.push({ text: result.feeRateStr, alignment: 'right' });
                // dataRow.push({ text: result.feeTotalStr, alignment: 'right' });

                // bodyData.push(dataRow);

                dataRow = [];

                dataRow.push({ text: 'Итого: ', colSpan: 5, alignment: 'right' });
                dataRow.push({});
                dataRow.push({});
                dataRow.push({});
                dataRow.push({});
                dataRow.push({ text: result.totalAmountStr, alignment: 'right' });

                bodyData.push(dataRow);

                const docDefinition = {
                    content: [
                        {
                            text: 'Внимание! Счет действителен для оплаты в течении 3 банковских дней. Оплата данного счета означает согласие с условиями договора.',
                            style: 'headerWarning'
                        },
                        {
                            table: {
                                widths: [150, 150, 40, '*'],
                                heights: [15, 30, 15, 15],

                                body: [
                                    [`ИНН: ${result.orgITN}`, `КПП: ${result.orgKPP}`, { text: 'Сч. №', rowSpan: 2, margin: [0, 35, 0, 0] }, { text: result.orgFinancialAccount, rowSpan: 2, margin: [0, 35, 0, 0] }],
                                    [{ text: `Получатель\n${result.orgName}`, colSpan: 2 }, {}, {}, {}],
                                    [{ text: `Банк получателя\n${result.orgBankName}`, colSpan: 2, rowSpan: 2 }, {}, 'БИК', result.orgBIK],
                                    [{}, {}, 'Сч. №', result.orgCorrAccount]
                                ]
                            },
                            style: 'mediumText',
                            margin: [0, 20, 0, 0]
                        },
                        {
                            text: `Счет № ${result.receiptNumber} от ${result.issuedDateTime}`,
                            style: 'mediumText',
                            bold: true,
                            margin: [0, 15, 0, 0]
                        },
                        {
                            text: `Поставщик: ${result.orgName}`,
                            style: 'mediumText',
                            bold: true,
                            margin: [0, 15, 0, 0]
                        },
                        {
                            text: `${result.orgAddress}`,
                            style: 'mediumText',
                        },
                        {
                            text: `Покупатель: ${result.payerName}`,
                            style: 'mediumText',
                            bold: true,
                            margin: [0, 15, 0, 0]
                        },
                        {
                            text: `ИНН: ${result.payerITN}, КПП: ${result.payerKPP}, Адрес: ${result.payerAddress}`,
                            style: 'mediumText'
                        },
                        {
                            table: {
                                headerRows: 1,
                                widths: [20, 220, 45, 'auto', 65, '*'],
                                body: bodyData
                            },
                            style: 'mediumText',
                            margin: [0, 15, 0, 40]
                        },
                        {
                            stack: [
                                {
                                    text: `Всего наименований: ${itemCount}, на сумму ${result.totalAmountStr} руб.`,
                                    style: 'mediumText'
                                },
                                {
                                    text: `Сумма прописью: ${rubles(result.totalAmount)}. Без НДС`,
                                    style: 'mediumText'
                                },
                                {
                                    columns: [
                                        { text: 'Руководитель', margin: [0, 40, 0, 0] },
                                        { image: `${result.signatureImage}`, width: 150, alignment: 'center', margin: [25, 0, 25, 0] },
                                        { text: `${result.orgHeadName}`, margin: [0, 40, 0, 0] },
                                        { image: `${result.stampImage}`, width: 125, alignment: 'center', margin: [25, 0, 45, 0] }
                                    ],
                                    style: 'mediumText',
                                    margin: [0, 20, 0, 0]
                                }
                            ],
                            id: 'NoBreak'
                        }
                    ],

                    pageBreakBefore: function (currentNode, followingNodesOnPage, nodesOnNextPage, previousNodesOnPage) {
                        if (currentNode.id === 'NoBreak' && currentNode.pageNumbers.length != 1) {
                            return true;
                        }
                        return false;
                    },

                    styles: {
                        headerWarning: {
                            fontSize: 7,
                            alignment: 'center'
                        },
                        mediumText: {
                            fontSize: 10,
                        },
                        smallText: {
                            fontSize: 8
                        },
                        tableHeader: {
                            bold: true,
                            fontSize: 10,
                            alignment: 'center'
                        }
                    }
                };

                pdfMake.createPdf(docDefinition).open();
            },
            error: function (error) {
                console.log(error);
            }
        });
    });
</script>