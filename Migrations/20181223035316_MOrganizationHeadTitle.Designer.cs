// <auto-generated />
using System;
using AvibaWeb.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AvibaWeb.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20181223035316_MOrganizationHeadTitle")]
    partial class MOrganizationHeadTitle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AvibaWeb.DomainModels.AcceptedCollector", b =>
                {
                    b.Property<string>("ProviderId");

                    b.Property<string>("CollectorId");

                    b.HasKey("ProviderId", "CollectorId");

                    b.HasIndex("CollectorId");

                    b.ToTable("AcceptedCollectors");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<int?>("BookingMappingId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("Photo");

                    b.Property<string>("Position");

                    b.Property<int?>("PushAllUserId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserITN");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number");

                    b.Property<string>("UserId");

                    b.HasKey("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("CollectorId");

                    b.Property<string>("Comment");

                    b.Property<string>("DeskIssuedId");

                    b.Property<int>("OperationType");

                    b.Property<int>("PaymentType");

                    b.Property<string>("ProviderId");

                    b.HasKey("CollectionId");

                    b.HasIndex("CollectorId");

                    b.HasIndex("DeskIssuedId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CollectionOperation", b =>
                {
                    b.Property<int>("CollectionOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollectionId");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.HasKey("CollectionOperationId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("CollectionOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CollectionOperationType", b =>
                {
                    b.Property<int>("CollectionOperationTypeId");

                    b.Property<string>("Description");

                    b.HasKey("CollectionOperationTypeId");

                    b.ToTable("CollectionOperationTypes");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceipt", b =>
                {
                    b.Property<int>("CorporatorReceiptId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount");

                    b.Property<string>("CorporatorId");

                    b.Property<decimal?>("FeeRate");

                    b.Property<int?>("PayeeAccountId");

                    b.Property<int?>("ReceiptNumber");

                    b.HasKey("CorporatorReceiptId");

                    b.HasIndex("CorporatorId");

                    b.HasIndex("PayeeAccountId");

                    b.ToTable("CorporatorReceipts");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceiptItem", b =>
                {
                    b.Property<int>("CorporatorReceiptItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("CorporatorReceiptId");

                    b.Property<int>("TicketOperationId");

                    b.HasKey("CorporatorReceiptItemId");

                    b.HasIndex("CorporatorReceiptId");

                    b.ToTable("CorporatorReceiptItems");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceiptOperation", b =>
                {
                    b.Property<int>("CorporatorReceiptOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CorporatorReceiptId");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.HasKey("CorporatorReceiptOperationId");

                    b.HasIndex("CorporatorReceiptId");

                    b.ToTable("CorporatorReceiptOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Counterparty", b =>
                {
                    b.Property<string>("ITN");

                    b.Property<string>("Address");

                    b.Property<string>("BIK");

                    b.Property<string>("BankAccount");

                    b.Property<string>("BankName");

                    b.Property<string>("CorrespondentAccount");

                    b.Property<string>("Email");

                    b.Property<string>("KPP");

                    b.Property<int?>("LoanGroupId");

                    b.Property<string>("ManagementName");

                    b.Property<string>("ManagementPosition");

                    b.Property<string>("Name");

                    b.Property<string>("OGRN");

                    b.Property<string>("Phone");

                    b.Property<int?>("TypeId");

                    b.HasKey("ITN");

                    b.HasIndex("LoanGroupId");

                    b.HasIndex("TypeId");

                    b.ToTable("Counterparties");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CounterpartyType", b =>
                {
                    b.Property<int>("CounterpartyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("CounterpartyTypeId");

                    b.ToTable("CounterpartyTypes");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Desk", b =>
                {
                    b.Property<string>("DeskId")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int?>("GroupId");

                    b.Property<bool>("IsActive");

                    b.HasKey("DeskId");

                    b.HasIndex("GroupId");

                    b.ToTable("Desks");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.DeskGroup", b =>
                {
                    b.Property<int>("DeskGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("DeskGroupId");

                    b.ToTable("DeskGroups");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Expenditure", b =>
                {
                    b.Property<int>("ExpenditureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<int>("DeskGroupId");

                    b.Property<string>("Name");

                    b.Property<int>("ObjectId");

                    b.Property<int>("TypeId");

                    b.HasKey("ExpenditureId");

                    b.HasIndex("DeskGroupId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("TypeId");

                    b.ToTable("Expenditures");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ExpenditureObject", b =>
                {
                    b.Property<int>("ExpenditureObjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("ExpenditureObjectId");

                    b.ToTable("ExpenditureObjects");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ExpenditureOperation", b =>
                {
                    b.Property<int>("ExpenditureOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExpenditureId");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.HasKey("ExpenditureOperationId");

                    b.HasIndex("ExpenditureId");

                    b.ToTable("ExpenditureOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ExpenditureType", b =>
                {
                    b.Property<int>("ExpenditureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("ExpenditureTypeId");

                    b.ToTable("ExpenditureTypes");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.FinancialAccount", b =>
                {
                    b.Property<int>("FinancialAccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<string>("BankName");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<int>("OrganizationId");

                    b.HasKey("FinancialAccountId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.FinancialAccountOperation", b =>
                {
                    b.Property<int>("FinancialAccountOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("CounterpartyId");

                    b.Property<string>("Description");

                    b.Property<int>("FinancialAccountId");

                    b.Property<DateTime>("InsertDateTime");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<string>("OrderNumber");

                    b.Property<int?>("TransferFinancialAccountId");

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("FinancialAccountOperationId");

                    b.HasIndex("CounterpartyId");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("TransferFinancialAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("FinancialAccountOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.KRSCancelRequest", b =>
                {
                    b.Property<int>("KRSCancelRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashierId")
                        .HasMaxLength(128);

                    b.Property<string>("Description");

                    b.Property<string>("DeskId");

                    b.Property<int>("KRSId");

                    b.HasKey("KRSCancelRequestId");

                    b.HasIndex("CashierId");

                    b.HasIndex("DeskId");

                    b.ToTable("KRSCancelRequests");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.KRSCancelRequestOperation", b =>
                {
                    b.Property<int>("KRSCancelRequestOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KRSCancelRequestId");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("KRSCancelRequestOperationId");

                    b.HasIndex("KRSCancelRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("KRSCancelRequestOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.LoanGroup", b =>
                {
                    b.Property<int>("LoanGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.HasKey("LoanGroupId");

                    b.ToTable("LoanGroups");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.OfficeDebit", b =>
                {
                    b.Property<int>("OfficeDebitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("Description");

                    b.HasKey("OfficeDebitId");

                    b.ToTable("OfficeDebits");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.OfficeDebitOperation", b =>
                {
                    b.Property<int>("OfficeDebitOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OfficeDebitId");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.HasKey("OfficeDebitOperationId");

                    b.HasIndex("OfficeDebitId");

                    b.ToTable("OfficeDebitOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CounterpartyId");

                    b.Property<string>("Description");

                    b.Property<string>("HeadName");

                    b.Property<string>("HeadTitle");

                    b.Property<bool>("IsActive");

                    b.Property<string>("SignatureFileName");

                    b.Property<string>("StampFileName");

                    b.HasKey("OrganizationId");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ProviderBalance", b =>
                {
                    b.Property<string>("ProviderId");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("Money");

                    b.HasKey("ProviderId");

                    b.ToTable("ProviderBalance");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ProviderBinding", b =>
                {
                    b.Property<int>("ProviderBindingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProviderId");

                    b.Property<string>("Session");

                    b.HasKey("ProviderBindingId");

                    b.HasIndex("ProviderId")
                        .IsUnique()
                        .HasFilter("[ProviderId] IS NOT NULL");

                    b.ToTable("ProviderBinding");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.SettingsValue", b =>
                {
                    b.Property<string>("Key")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.HasKey("Key");

                    b.ToTable("SettingsValues");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.SubagentData", b =>
                {
                    b.Property<string>("SubagentId");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("Money");

                    b.HasKey("SubagentId");

                    b.ToTable("SubagentData");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.SubagentDesk", b =>
                {
                    b.Property<int>("SubagentDeskId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeskId");

                    b.Property<string>("SubagentId");

                    b.HasKey("SubagentDeskId");

                    b.HasIndex("DeskId");

                    b.HasIndex("SubagentId");

                    b.ToTable("SubagentDesks");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccount", b =>
                {
                    b.Property<int>("TransitAccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("Money");

                    b.Property<bool>("IsActive");

                    b.HasKey("TransitAccountId");

                    b.ToTable("TransitAccounts");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountCredit", b =>
                {
                    b.Property<int>("TransitAccountCreditId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountAmount");

                    b.Property<decimal>("AddAmount");

                    b.Property<int?>("LoanGroupId");

                    b.Property<int>("TransitAccountId");

                    b.HasKey("TransitAccountCreditId");

                    b.HasIndex("LoanGroupId");

                    b.HasIndex("TransitAccountId");

                    b.ToTable("TransitAccountCredits");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountCreditOperation", b =>
                {
                    b.Property<int>("TransitAccountCreditOperationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("OperationTypeId");

                    b.Property<int>("TransitAccountCreditId");

                    b.HasKey("TransitAccountCreditOperationId");

                    b.HasIndex("TransitAccountCreditId");

                    b.ToTable("TransitAccountCreditOperations");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountDebit", b =>
                {
                    b.Property<int>("TransitAccountDebitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("OperationDateTime");

                    b.Property<int>("TransitAccountId");

                    b.HasKey("TransitAccountDebitId");

                    b.HasIndex("TransitAccountId");

                    b.ToTable("TransitAccountDebits");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.UserCheckIn", b =>
                {
                    b.Property<int>("UserCheckInId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDateTime");

                    b.Property<string>("DeskId");

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("UserCheckInId");

                    b.HasIndex("DeskId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCheckIns");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.VCorpBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("CorpName");

                    b.Property<DateTime>("LastPaymentDate");

                    b.Property<DateTime>("LastReceiptDate");

                    b.HasKey("Id");

                    b.ToTable("VCorpBalances");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.VDeskBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("DeskId");

                    b.Property<string>("DeskName");

                    b.HasKey("Id");

                    b.ToTable("VDeskBalances");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.VKRSCancelRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BSONumber");

                    b.Property<DateTime>("DealDateTime");

                    b.Property<string>("Description");

                    b.Property<string>("Desk");

                    b.Property<decimal>("KRSAmount");

                    b.Property<int>("KRSCancelRequestId");

                    b.Property<string>("KRSNumber");

                    b.Property<string>("ManagerName");

                    b.Property<string>("Name");

                    b.Property<int>("OperationType");

                    b.Property<int>("OperationTypeId");

                    b.Property<string>("PassengerName");

                    b.Property<decimal>("Payment");

                    b.Property<string>("Route");

                    b.HasKey("Id");

                    b.ToTable("VKRSCancelRequests");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.VReceiptTicketInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PassengerName");

                    b.Property<int>("SegCount");

                    b.Property<string>("TicketLabel");

                    b.Property<int>("TicketOperationId");

                    b.HasKey("Id");

                    b.ToTable("VReceiptTicketInfo");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.VTicketOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BSONumber");

                    b.Property<DateTime>("ExecutionDateTime");

                    b.Property<int>("OperationTypeID");

                    b.Property<string>("PassengerName");

                    b.Property<decimal>("Payment");

                    b.Property<string>("Route");

                    b.Property<int>("TicketOperationId");

                    b.HasKey("Id");

                    b.ToTable("VTicketOperations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.AcceptedCollector", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Provider")
                        .WithMany("AcceptedCollectors")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Card", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Collection", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Collector")
                        .WithMany()
                        .HasForeignKey("CollectorId");

                    b.HasOne("AvibaWeb.DomainModels.Desk", "DeskIssued")
                        .WithMany()
                        .HasForeignKey("DeskIssuedId");

                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CollectionOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Collection", "Collection")
                        .WithMany("Operations")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.CollectionOperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceipt", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Corporator")
                        .WithMany()
                        .HasForeignKey("CorporatorId");

                    b.HasOne("AvibaWeb.DomainModels.FinancialAccount", "PayeeAccount")
                        .WithMany()
                        .HasForeignKey("PayeeAccountId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceiptItem", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.CorporatorReceipt", "Receipt")
                        .WithMany("Items")
                        .HasForeignKey("CorporatorReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.CorporatorReceiptOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.CorporatorReceipt", "Receipt")
                        .WithMany("Operations")
                        .HasForeignKey("CorporatorReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Counterparty", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.LoanGroup", "LoanGroup")
                        .WithMany("Counterparties")
                        .HasForeignKey("LoanGroupId");

                    b.HasOne("AvibaWeb.DomainModels.CounterpartyType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Desk", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.DeskGroup", "Group")
                        .WithMany("Desks")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Expenditure", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.DeskGroup", "DeskGroup")
                        .WithMany()
                        .HasForeignKey("DeskGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.ExpenditureObject", "Object")
                        .WithMany()
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.ExpenditureType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ExpenditureOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Expenditure", "Expenditure")
                        .WithMany("Operations")
                        .HasForeignKey("ExpenditureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.FinancialAccount", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Organization", "Organization")
                        .WithMany("Accounts")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.FinancialAccountOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId");

                    b.HasOne("AvibaWeb.DomainModels.FinancialAccount", "Account")
                        .WithMany()
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.FinancialAccount", "TransferAccount")
                        .WithMany()
                        .HasForeignKey("TransferFinancialAccountId");

                    b.HasOne("AvibaWeb.DomainModels.AppUser", "PayeeUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.KRSCancelRequest", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Cashier")
                        .WithMany()
                        .HasForeignKey("CashierId");

                    b.HasOne("AvibaWeb.DomainModels.Desk", "Desk")
                        .WithMany()
                        .HasForeignKey("DeskId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.KRSCancelRequestOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.KRSCancelRequest", "Request")
                        .WithMany()
                        .HasForeignKey("KRSCancelRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.AppUser", "Manager")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.OfficeDebitOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.OfficeDebit", "OfficeDebit")
                        .WithMany("Operations")
                        .HasForeignKey("OfficeDebitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.Organization", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Counterparty")
                        .WithMany()
                        .HasForeignKey("CounterpartyId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ProviderBalance", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Provider")
                        .WithOne("ProviderBalance")
                        .HasForeignKey("AvibaWeb.DomainModels.ProviderBalance", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.ProviderBinding", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Provider")
                        .WithOne("ProviderBinding")
                        .HasForeignKey("AvibaWeb.DomainModels.ProviderBinding", "ProviderId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.SubagentData", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Counterparty", "Subagent")
                        .WithOne("SubagentData")
                        .HasForeignKey("AvibaWeb.DomainModels.SubagentData", "SubagentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.SubagentDesk", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Desk", "Desk")
                        .WithMany("SubagentDesks")
                        .HasForeignKey("DeskId");

                    b.HasOne("AvibaWeb.DomainModels.SubagentData", "Subagent")
                        .WithMany("SubagentDesks")
                        .HasForeignKey("SubagentId");
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountCredit", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.LoanGroup", "LoanGroup")
                        .WithMany()
                        .HasForeignKey("LoanGroupId");

                    b.HasOne("AvibaWeb.DomainModels.TransitAccount", "Account")
                        .WithMany()
                        .HasForeignKey("TransitAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountCreditOperation", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.TransitAccountCredit", "TransitAccountCredit")
                        .WithMany("Operations")
                        .HasForeignKey("TransitAccountCreditId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.TransitAccountDebit", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.TransitAccount", "Account")
                        .WithMany()
                        .HasForeignKey("TransitAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AvibaWeb.DomainModels.UserCheckIn", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.Desk", "Desk")
                        .WithMany()
                        .HasForeignKey("DeskId");

                    b.HasOne("AvibaWeb.DomainModels.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AvibaWeb.DomainModels.AppUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AvibaWeb.DomainModels.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
